#spring.datasource.initialize=true
#spring.datasource.schema=h2-schema.sql
#spring.datasource.data=h2-data.sql


# Using ssl configuration means the application no longer supports a plain HTTP connector at server port
# SSL Configuration, Support only SSL 1.2, Disabled
# ----------------------
server.port=9080
server.ssl.enabled=true
server.ssl.key-store=src/test/resources/gunnarro-identity.jks
server.ssl.key-store-password=${GUNNARRO_KEYSTORE_PASS}
server.ssl.key-password=${GUNNARRO_KEYSTORE_PASS}
server.ssl.key-alias=${GUNNARRO_KEYSTORE_ALIAS}

# ssl ciphers
#server.ssl.ciphers=TLS_RSA_WITH_AES_128_CBC_SHA256
server.ssl.ciphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_SHA,TLS_ECDHE_RSA_WITH_AES_256_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_SHA384,TLS_ECDHE_RSA_WITH_AES_256_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_128_SHA,TLS_DHE_DSS_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_256_SHA256,TLS_DHE_DSS_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_256_SHA

# ssl protocol to use.
server.ssl.protocol=TLS

# Enabled ssl protocols.
server.ssl.enabled-protocols=TLSv1.2

# jdbc
# jdbc.url=${MYSQL_URL}
# jdbc.user=${MYSQL_USER}
# jdbc.pwd=${MYSQL_PASS}
# jdbc.driverClassName=dbc.driverClassName


#  mysql carregister < car_register.sql 
#
# mysqlimport --ignore-lines=1 
#            --fields-terminated-by=,
#            --local -u root
#            -p Database 
#             car_register.csv

# https://hotell.difi.no/?dataset=vegvesen/utek
# https://remotemysql.com
#Server: remotemysql.com
#Username: iZmYwYE5P1
#Database name: iZmYwYE5P1
#Password: lqYrFZRv9a
#Port: 3306


mariaDB4j.dataDir=
spring.datasource.url=jdbc:mysql://localhost/microdb
spring.datasource.username=${MARIADB_USER}
spring.datasource.password=${MARIADB_PASS}
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true
# Enforces database initialization
spring.datasource.sqlScriptEncoding=UTF-8
spring.datasource.initialization-mode=always

# for Cloud sql
#spring.cloud.gcp.sql.enabled=true
#spring.cloud.gcp.project-id=microapp
#spring.cloud.gcp.sql.database-name=microdb
#spring.cloud.gcp.sql.instance-connection-name=big-genre-214416:europe-north1:microdb
#spring.cloud.gcp.sql.credentials.location=file:./src/main/resources/cloudsql-microdb.json
#spring.cloud.gcp.credentials.location=file:./src/main/resources/cloudsql-microdb.json

#useSSL=false
#database=mysql
#cloudsql.jdbc.instance.connection.name=big-genre-214416:europe-north1:microdb
#cloudsql.jdbc.socketfactory=com.google.cloud.sql.mysql.SocketFactory
#cloudsql.jdbc.driverClassName=com.mysql.cj.jdbc.Driver
#cloudsql.jdbc.url=jdbc:mysql://35.228.155.125/microdb?cloudSqlInstance=big-genre-214416:europe-north1:microdb
cloudsql.jdbc.username=
cloudsql.jdbc.pwd=

#jdbc:mysql://google/<DATABASE_NAME>?cloudSqlInstance=<INSTANCE_CONNECTION_NAME>&socketFactory=com.google.cloud.sql.mysql.SocketFactory&useSSL=false&user=<MYSQL_USER_NAME>&password=<MYSQL_USER_PASSWORD>
cloudsql.jdbc.url2=jdbc:mysql://google/microdb?cloudSqlInstance=big-genre-214416:europe-north1:microdb&socketFactory=com.google.cloud.sql.mysql.SocketFactory&useSSL=false&user=root&password=ABcd2o1o
#spring.datasource.url=jdbc:mysql://google/database?cloudSqlInstance=spring-test:us-central1:spring-main=com.google.cloud.sql.mysql.SocketFactory
#spring.datasource.url=jdbc:mysql://###.#.#.#/database?cloudSqlInstance=spring-test:us-central1:spring-main=com.google.cloud.sql.mysql.SocketFactory

fileupload.root.dir=data

