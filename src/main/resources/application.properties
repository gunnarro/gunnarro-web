# spring.devtools.restart.exclude=static/**,public/**
# application
application.name=@project.name@
application.version=@project.version@
app.encoding=@project.build.sourceEncoding@
app.java.version=@java.version@
application.build.time=@build.timestamp@
spring.application.name=gunnarro
server.servlet.application-display-name=gunnarro
server.servlet.session.timeout=36000
# servlet
servlet.name=gunnarro
# tomcat https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# endpoints.cors.allowed-methods=GET,POST,HEAD,OPTIONS,PUT
# server
server.context-path=/
server.servlet-path=/
server.compression.enabled=true
server.error.whitelabel.enabled=false
# Using ssl configuration means the application no longer supports a plain HTTP connector at server port
# SSL Configuration, Support only SSL 1.2, Disabled
# ----------------------
server.port=80
server.ssl.enabled=false
server.ssl.key-store-type=JKS
server.ssl.key-store=${GUNNARRO_KEYSTORE_PATH}
server.ssl.key-store-password=${GUNNARRO_KEYSTORE_PASS}
server.ssl.key-password=${GUNNARRO_KEYSTORE_PASS}
# server.ssl.key-alias=g${GUNNARRO_KEYSTORE_ALIAS}

# management settings
# management.server.port=8081
# management.server.address=127.0.0.1
# management.server.ssl.enabled=false
# management.endpoints.web.exposure.include=*
# management.endpoints.web.cors.allowed-origins=*
# management.endpoints.web.cors.allowed-methods=*
# management.endpoints.web.cors.allowed-headers=*

# ssl ciphers
#server.ssl.ciphers=TLS_RSA_WITH_AES_128_CBC_SHA256
server.ssl.ciphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_SHA,TLS_ECDHE_RSA_WITH_AES_256_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_SHA384,TLS_ECDHE_RSA_WITH_AES_256_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_128_SHA,TLS_DHE_DSS_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_256_SHA256,TLS_DHE_DSS_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_256_SHA
# ssl protocol to use
server.ssl.protocol=TLS
# Enabled ssl protocols.
server.ssl.enabled-protocols=TLSv1.2
# ------------------------------------
# thymeleaf
spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html
spring.thymeleaf.cache=false

# spring
spring.messages.basename=i18n/messages

# mariaDB embedded
app.mariaDB4j.databaseName=followup
mariadb.jdbc.url=${MARIADB_URL}
mariadb.jdbc.user=${MARIADB_USER}
mariadb.jdbc.pwd=${MARIADB_PASS}
# spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
#Setting to blank will put db into a tmp directory and recreate every test run
#mariaDB4j.dataDir=
#Pick a random open port
#mariaDB4j.port=0

# jdbc
jdbc.url=jdbc:mysql://localhost:3306/followup?useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
jdbc.user=web
jdbc.pwd=
jdbc.driverClassName=com.mysql.cj.jdbc.Driver

# for fileupload
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
fileupload.root.dir=~/code/github/microapp-master/followup-manager/data
# facebook provider details
# spring 4
#facebook.api.key=1113181278779457
#facebook.api.secret=789d646ff18505732c3a2b591662a700
# spring 5
#spring.security.oauth2.client.registration.facebook.client-id=1113181278779457 
#spring.security.oauth2.client.registration.facebook.client-secret=789d646ff18505732c3a2b591662a700
# twitter provider details
#twitter.api.key=
#twitter.api.secret=
# linkedin provider details
#linkedin.api.key=
#linkedin.api.secret=
# github provider details
#github.client.id=95d67154b86b4ee2bb06
#github.client.secret=86bf0714e877559c58a1113e0d0278729e5b5dea


